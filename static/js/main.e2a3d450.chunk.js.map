{"version":3,"sources":["Components/Square/square.js","Components/Board/board.js","Components/Game/game.js","helper.js","index.js"],"names":["Square","value","onClick","highlight","style","className","Board","squares","winLine","map","square","i","includes","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winInfo","lines","length","a","b","c","winner","line","calculateWinner","player","textAlign","color","isBoardFull","alert","historyPoint","slice","current","_step","move","destination","step","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2a3d450.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = ({ value, onClick, highlight }) => {\n // const style = value ? `squares ${value}` : `squares`;\n  const style = (value ? `squares ${value}` : `squares`) + (highlight ? ' highlight' : ''); \n  return (\n    <button className={style} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\"; \nimport Square from '../Square/square'\n\nconst Board = ({ squares, onClick, winLine }) => (\n  <div className=\"board\">\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} highlight={winLine && winLine.includes(i)} />\n    ))}\n  </div>\n);\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport { calculateWinner } from \"../../helper\";\nimport Board from '../Board/board' \n\nconst Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  //const winner = calculateWinner(history[stepNumber]);\n  const winInfo = calculateWinner(history[stepNumber]);\n  const winner = winInfo.winner;\n  const player = xIsNext ? \"X\" : \"Y\";\n\n  const renderRestartButton = () => {\n    return (\n      <button\n        onClick={() => {\n          setHistory([Array(9).fill(null)]);\n          setStepNumber(0);\n          setXisNext(true);\n        }}>\n        Restart Game\n      </button>\n    );\n  }\n\n  const handleClick = (i) => {\n    const historyPoint = history.slice(0, stepNumber + 1);\n    const current = historyPoint[stepNumber];\n    const squares = [...current];\n    // return if won or if user clicks on occupied square\n    if (winner || squares[i]) return;\n\n    // select square X or Y\n    squares[i] = player;\n    setHistory([...historyPoint, squares]);\n    setStepNumber(historyPoint.length);\n    setXisNext(!xIsNext);\n  };\n\n  const isBoardFull = (squares) => {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const getStatus = () => {\n    if (winner) {\n      // alert('Player ' + winner + \" won the game\"); \n      return \"Winner: \" + winner;\n    } else if (isBoardFull(history[stepNumber])) {\n      alert('Game is Tie!');\n      return \"Game is Tie!\";\n    } else {\n      return \"Next player: \" + player;\n    }\n  }\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\n      return (\n        <li key={move}>\n          <button onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <div className=\"relative\">\n        <h1>Tic Tac Toe Game</h1>\n        <p> Player List (X and Y) :  &nbsp;&nbsp;\n            {/* <button className={\"navitem \" + (xIsNext && !winner ? 'activePlayer' : '')} >Player 1</button> &nbsp;&nbsp;\n            <button className={\"navitem \" + (!xIsNext && !winner ? 'activePlayer' : '')}>Player 2</button> */}\n\n          <button className=\"navitem\">Player 1</button> &nbsp;&nbsp;\n            <button className=\"navitem\">Player 2</button>\n        </p>\n      </div> \n\n      <div className=\"game-info\">{winner ? \"Game Over! Winner is: \" + winner : \"\"}</div>\n      <h3 className=\"player-info\" style={{ textAlign: 'right', color:'blue' }}>{!winner ? getStatus() : \"\"}</h3>\n\n      <Board squares={history[stepNumber]} onClick={handleClick} winLine={winInfo.line} />\n      <div className=\"info-wrapper\">\n        <div>\n          <br /><br />\n          <h3>Rewinding of Moves</h3>\n          {renderMoves()}\n        </div>\n        <div>\n          {renderRestartButton()} \n        </div>\n\n        {/* <h3>{getStatus()}</h3> */}\n        {/* <h3>{winner ? \"Winner: \" + winner : \"Next Player: \" + player}</h3> */}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n     // return squares[a];\n      return {\n        winner: squares[a],\n        line: lines[i],\n      };\n    }\n  }\n // return null;\n return {\n  winner: null,\n};\n}","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport Game from './Components/Game/game'\nimport \"./index.css\"; \n\nReactDom.render(<Game/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}